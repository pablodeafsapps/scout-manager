apply plugin: 'com.android.library'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jetbrains.dokka'

android {
    compileSdkVersion compilesdk_version
    defaultConfig {
        minSdkVersion minsdk_version
        targetSdkVersion targetsdk_version
        buildToolsVersion buildtools_version
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions "version"
    productFlavors {
        //TODO: update 'API_URL' value for 'pre' and 'pro' when available
        dev {
            buildConfigField "String", "API_URL", "\"https://virtserver.swaggerhub.com/plexus-tech/60dias-expenses-api/1.0.0/\""
        }
        pre {
            buildConfigField "String", "API_URL", "\"https://virtserver.swaggerhub.com/plexus-tech/60dias-expenses-api/1.0.0/\""
        }
        pro {
            buildConfigField "String", "API_URL", "\"https://virtserver.swaggerhub.com/plexus-tech/60dias-expenses-api/1.0.0/\""
        }
    }
    variantFilter { variant ->
        def names = variant.flavors*.name
        if (variant.buildType.name == 'release' && (names.contains('dev') || names.contains('pre'))) {
            setIgnore(true)
        }
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }
    lintOptions {
        abortOnError false
    }
}

dokka {
    outputFormat = 'html'
    outputDirectory = "./docs/dokka"
    skipEmptyPackages = true   // skip empty packages
    skipDeprecated = false   // skip deprecated
    noStdlibLink = false   // skip documentation related to kotlin-stdlib
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:$coroutinesadapter_version"
    // other modules
    implementation project(':domain-layer')
    // 3rd party libraries
    implementation "org.koin:koin-android:$koin_version"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    // testing dependencies - Unit Test
    testImplementation "junit:junit:$junit_version"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$nhaarmanmockito_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    // koin testing tools
    testImplementation "org.koin:koin-test:$koin_version"
    // testing dependencies - Instrumentation Test
    androidTestImplementation "org.mockito:mockito-android:$mockitoandroid_version"
    androidTestImplementation "androidx.test:runner:$androidxtestrunner_version"
    androidTestImplementation "androidx.test:rules:$androidxtestrules_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    // koin testing tools
    testImplementation "org.koin:koin-test:$koin_version"
    androidTestImplementation("org.koin:koin-test:$koin_version") {
        exclude group: 'org.mockito'
        exclude group: 'mockito-inline'
    }
}